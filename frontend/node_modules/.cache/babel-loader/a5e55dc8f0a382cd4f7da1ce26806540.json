{"ast":null,"code":"var _jsxFileName = \"E:\\\\Nanodegree_FS\\\\project_2\\\\Trivia\\\\frontend\\\\src\\\\components\\\\QuizView.js\";\nimport React, { Component } from 'react';\nimport $ from 'jquery';\nimport '../stylesheets/QuizView.css';\nconst questionsPerPlay = 5;\n\nclass QuizView extends Component {\n  constructor(props) {\n    super();\n\n    this.selectCategory = ({\n      type,\n      id = 0\n    }) => {\n      this.setState({\n        quizCategory: {\n          type,\n          id\n        }\n      }, this.getNextQuestion);\n    };\n\n    this.handleChange = event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n\n    this.getNextQuestion = () => {\n      const previousQuestions = [...this.state.previousQuestions];\n\n      if (this.state.currentQuestion.id) {\n        previousQuestions.push(this.state.currentQuestion.id);\n      }\n\n      $.ajax({\n        url: '/quizzes',\n        //TODO: update request URL\n        type: 'POST',\n        dataType: 'json',\n        contentType: 'application/json',\n        data: JSON.stringify({\n          previous_questions: previousQuestions,\n          quiz_category: this.state.quizCategory\n        }),\n        xhrFields: {\n          withCredentials: true\n        },\n        crossDomain: true,\n        success: result => {\n          this.setState({\n            showAnswer: false,\n            previousQuestions: previousQuestions,\n            currentQuestion: result.question,\n            guess: '',\n            forceEnd: result.question ? false : true\n          });\n          return;\n        },\n        error: error => {\n          console.log(\"Far -> \", error);\n          alert('Unable to load question. Please try your request again');\n          return;\n        }\n      });\n    };\n\n    this.submitGuess = event => {\n      event.preventDefault();\n      let evaluate = this.evaluateAnswer();\n      this.setState({\n        numCorrect: !evaluate ? this.state.numCorrect : this.state.numCorrect + 1,\n        showAnswer: true\n      });\n    };\n\n    this.restartGame = () => {\n      this.setState({\n        quizCategory: null,\n        previousQuestions: [],\n        showAnswer: false,\n        numCorrect: 0,\n        currentQuestion: {},\n        guess: '',\n        forceEnd: false\n      });\n    };\n\n    this.evaluateAnswer = () => {\n      const formatGuess = this.state.guess // eslint-disable-next-line\n      .replace(/[.,\\/#!$%\\^&\\*;:{}=\\-_`~()]/g, '').toLowerCase();\n      const answerArray = this.state.currentQuestion.answer.toLowerCase().split(' ');\n      return answerArray.every(el => formatGuess.includes(el));\n    };\n\n    this.state = {\n      quizCategory: null,\n      previousQuestions: [],\n      showAnswer: false,\n      categories: {},\n      numCorrect: 0,\n      currentQuestion: {},\n      guess: '',\n      forceEnd: false\n    };\n  }\n\n  componentDidMount() {\n    $.ajax({\n      url: \"/categories\",\n      //TODO: update request URL\n      type: 'GET',\n      success: result => {\n        this.setState({\n          categories: result.categories\n        });\n        return;\n      },\n      error: error => {\n        alert('Unable to load categories. Please try your request again');\n        return;\n      }\n    });\n  }\n\n  renderPrePlay() {\n    return React.createElement(\"div\", {\n      className: \"quiz-play-holder\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"choose-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, \"Choose Category\"), React.createElement(\"div\", {\n      className: \"category-holder\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"play-category\",\n      onClick: this.selectCategory,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, \"ALL\"), Object.keys(this.state.categories).map(id => {\n      return React.createElement(\"div\", {\n        key: id,\n        value: id,\n        className: \"play-category\",\n        onClick: () => this.selectCategory({\n          type: this.state.categories[id],\n          id\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }, this.state.categories[id]);\n    })));\n  }\n\n  renderFinalScore() {\n    return React.createElement(\"div\", {\n      className: \"quiz-play-holder\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"final-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, \"Your Final Score is \", this.state.numCorrect), React.createElement(\"div\", {\n      className: \"play-again button\",\n      onClick: this.restartGame,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, \"Play Again?\"));\n  }\n\n  renderCorrectAnswer() {\n    let evaluate = this.evaluateAnswer();\n    return React.createElement(\"div\", {\n      className: \"quiz-play-holder\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"quiz-question\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    }, this.state.currentQuestion.question), React.createElement(\"div\", {\n      className: \"\".concat(evaluate ? 'correct' : 'wrong'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    }, evaluate ? 'You were correct!' : 'You were incorrect'), React.createElement(\"div\", {\n      className: \"quiz-answer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      },\n      __self: this\n    }, this.state.currentQuestion.answer), React.createElement(\"div\", {\n      className: \"next-question button\",\n      onClick: this.getNextQuestion,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165\n      },\n      __self: this\n    }, ' ', \"Next Question\", ' '));\n  }\n\n  renderPlay() {\n    return this.state.previousQuestions.length === questionsPerPlay || this.state.forceEnd ? this.renderFinalScore() : this.state.showAnswer ? this.renderCorrectAnswer() : React.createElement(\"div\", {\n      className: \"quiz-play-holder\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"quiz-question\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181\n      },\n      __self: this\n    }, this.state.currentQuestion.question), React.createElement(\"form\", {\n      onSubmit: this.submitGuess,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      name: \"guess\",\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      className: \"submit-guess button\",\n      type: \"submit\",\n      value: \"Submit Answer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186\n      },\n      __self: this\n    })));\n  }\n\n  render() {\n    return this.state.quizCategory ? this.renderPlay() : this.renderPrePlay();\n  }\n\n}\n\nexport default QuizView;","map":{"version":3,"sources":["E:\\Nanodegree_FS\\project_2\\Trivia\\frontend\\src\\components\\QuizView.js"],"names":["React","Component","$","questionsPerPlay","QuizView","constructor","props","selectCategory","type","id","setState","quizCategory","getNextQuestion","handleChange","event","target","name","value","previousQuestions","state","currentQuestion","push","ajax","url","dataType","contentType","data","JSON","stringify","previous_questions","quiz_category","xhrFields","withCredentials","crossDomain","success","result","showAnswer","question","guess","forceEnd","error","console","log","alert","submitGuess","preventDefault","evaluate","evaluateAnswer","numCorrect","restartGame","formatGuess","replace","toLowerCase","answerArray","answer","split","every","el","includes","categories","componentDidMount","renderPrePlay","Object","keys","map","renderFinalScore","renderCorrectAnswer","renderPlay","length","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport $ from 'jquery';\r\nimport '../stylesheets/QuizView.css';\r\n\r\nconst questionsPerPlay = 5;\r\n\r\nclass QuizView extends Component {\r\n  constructor(props) {\r\n    super();\r\n    this.state = {\r\n      quizCategory: null,\r\n      previousQuestions: [],\r\n      showAnswer: false,\r\n      categories: {},\r\n      numCorrect: 0,\r\n      currentQuestion: {},\r\n      guess: '',\r\n      forceEnd: false,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    $.ajax({\r\n      url: `/categories`, //TODO: update request URL\r\n      type: 'GET',\r\n      success: (result) => {\r\n        this.setState({ categories: result.categories });\r\n        return;\r\n      },\r\n      error: (error) => {\r\n        alert('Unable to load categories. Please try your request again');\r\n        return;\r\n      },\r\n    });\r\n  }\r\n\r\n  selectCategory = ({ type, id = 0 }) => {\r\n    this.setState({ quizCategory: { type, id } }, this.getNextQuestion);\r\n  };\r\n\r\n  handleChange = (event) => {\r\n    this.setState({ [event.target.name]: event.target.value });\r\n  };\r\n\r\n  getNextQuestion = () => {\r\n    const previousQuestions = [...this.state.previousQuestions];\r\n    if (this.state.currentQuestion.id) {\r\n      previousQuestions.push(this.state.currentQuestion.id);\r\n    }\r\n\r\n    $.ajax({\r\n      url: '/quizzes', //TODO: update request URL\r\n      type: 'POST',\r\n      dataType: 'json',\r\n      contentType: 'application/json',\r\n      data: JSON.stringify({\r\n        previous_questions: previousQuestions,\r\n        quiz_category: this.state.quizCategory,\r\n      }),\r\n      xhrFields: {\r\n        withCredentials: true,\r\n      },\r\n      crossDomain: true,\r\n      success: (result) => {\r\n        this.setState({\r\n          showAnswer: false,\r\n          previousQuestions: previousQuestions,\r\n          currentQuestion: result.question,\r\n          guess: '',\r\n          forceEnd: result.question ? false : true,\r\n        });\r\n        return;\r\n      },\r\n      error: (error) => {\r\n        console.log(\"Far -> \", error)\r\n        alert('Unable to load question. Please try your request again');\r\n        return;\r\n      },\r\n    });\r\n  };\r\n\r\n  submitGuess = (event) => {\r\n    event.preventDefault();\r\n    let evaluate = this.evaluateAnswer();\r\n    this.setState({\r\n      numCorrect: !evaluate ? this.state.numCorrect : this.state.numCorrect + 1,\r\n      showAnswer: true,\r\n    });\r\n  };\r\n\r\n  restartGame = () => {\r\n    this.setState({\r\n      quizCategory: null,\r\n      previousQuestions: [],\r\n      showAnswer: false,\r\n      numCorrect: 0,\r\n      currentQuestion: {},\r\n      guess: '',\r\n      forceEnd: false,\r\n    });\r\n  };\r\n\r\n  renderPrePlay() {\r\n    return (\r\n      <div className='quiz-play-holder'>\r\n        <div className='choose-header'>Choose Category</div>\r\n        <div className='category-holder'>\r\n          <div className='play-category' onClick={this.selectCategory}>\r\n            ALL\r\n          </div>\r\n          {Object.keys(this.state.categories).map((id) => {\r\n            return (\r\n              <div\r\n                key={id}\r\n                value={id}\r\n                className='play-category'\r\n                onClick={() =>\r\n                  this.selectCategory({ type: this.state.categories[id], id })\r\n                }\r\n              >\r\n                {this.state.categories[id]}\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  renderFinalScore() {\r\n    return (\r\n      <div className='quiz-play-holder'>\r\n        <div className='final-header'>\r\n          Your Final Score is {this.state.numCorrect}\r\n        </div>\r\n        <div className='play-again button' onClick={this.restartGame}>\r\n          Play Again?\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  evaluateAnswer = () => {\r\n    const formatGuess = this.state.guess\r\n      // eslint-disable-next-line\r\n      .replace(/[.,\\/#!$%\\^&\\*;:{}=\\-_`~()]/g, '')\r\n      .toLowerCase();\r\n    const answerArray = this.state.currentQuestion.answer\r\n      .toLowerCase()\r\n      .split(' ');\r\n    return answerArray.every((el) => formatGuess.includes(el));\r\n  };\r\n\r\n  renderCorrectAnswer() {\r\n    let evaluate = this.evaluateAnswer();\r\n    return (\r\n      <div className='quiz-play-holder'>\r\n        <div className='quiz-question'>\r\n          {this.state.currentQuestion.question}\r\n        </div>\r\n        <div className={`${evaluate ? 'correct' : 'wrong'}`}>\r\n          {evaluate ? 'You were correct!' : 'You were incorrect'}\r\n        </div>\r\n        <div className='quiz-answer'>{this.state.currentQuestion.answer}</div>\r\n        <div className='next-question button' onClick={this.getNextQuestion}>\r\n          {' '}\r\n          Next Question{' '}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  renderPlay() {\r\n    return this.state.previousQuestions.length === questionsPerPlay ||\r\n      this.state.forceEnd ? (\r\n      this.renderFinalScore()\r\n    ) : this.state.showAnswer ? (\r\n      this.renderCorrectAnswer()\r\n    ) : (\r\n      <div className='quiz-play-holder'>\r\n        <div className='quiz-question'>\r\n          {this.state.currentQuestion.question}\r\n        </div>\r\n        <form onSubmit={this.submitGuess}>\r\n          <input type='text' name='guess' onChange={this.handleChange} />\r\n          <input\r\n            className='submit-guess button'\r\n            type='submit'\r\n            value='Submit Answer'\r\n          />\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return this.state.quizCategory ? this.renderPlay() : this.renderPrePlay();\r\n  }\r\n}\r\n\r\nexport default QuizView;\r\n"]},"metadata":{},"sourceType":"module"}